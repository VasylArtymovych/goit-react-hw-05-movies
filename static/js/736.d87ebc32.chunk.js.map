{"version":3,"file":"static/js/736.d87ebc32.chunk.js","mappings":"4TACMA,EAAQC,EAAAA,MAAAA,QAERC,EAAU,gCACVC,EAAU,mCAEHC,EAAa,mCAAG,sGACJJ,EAAMK,IAC3BH,EACE,oBACA,IAAII,gBAAgB,CAClBH,QAAAA,KALqB,cACrBI,EADqB,OASrBC,EAAOD,EAASC,KATK,kBAUpBA,EAAKC,SAVe,2CAAH,qDAabC,EAAW,mCAAG,WAAMC,GAAN,yFACFX,EAAMK,IAC3BH,EAAO,gBAEL,IAAII,gBAAgB,CAClBH,QAAAA,EACAQ,MAAAA,EACAC,SAAU,QACVC,KAAM,EACNC,eAAe,KATI,cACnBP,EADmB,OAanBC,EAAOD,EAASC,KAbG,kBAclBA,EAAKC,SAda,2CAAH,sDAiBXM,EAAc,mCAAG,WAAMC,GAAN,yFACLhB,EAAMK,IAC3BH,EAAO,gBACIc,EADJ,KAEL,IAAIV,gBAAgB,CAClBH,QAAAA,EACAS,SAAU,WANY,cACtBL,EADsB,OAUtBC,EAAOD,EAASC,KAVM,kBAWrBA,GAXqB,2CAAH,sDAcdS,EAAc,mCAAG,WAAMD,GAAN,yFACLhB,EAAMK,IAC3BH,EAAO,gBACIc,EADJ,aAEL,IAAIV,gBAAgB,CAClBH,QAAAA,EACAS,SAAU,WANY,cACtBL,EADsB,OAUtBC,EAAOD,EAASC,KAVM,kBAWrBA,GAXqB,2CAAH,sDAcdU,EAAiB,mCAAG,WAAMF,GAAN,yFACRhB,EAAMK,IAC3BH,EAAO,gBACIc,EADJ,aAEL,IAAIV,gBAAgB,CAClBH,QAAAA,EACAS,SAAU,QACVC,KAAM,KAPmB,cACzBN,EADyB,OAWzBC,EAAOD,EAASC,KAXS,kBAYxBA,GAZwB,2CAAH,sDAe9BE,EAAYS,UAAY,CACtBR,MAAOS,IAAAA,OAAAA,YAGTL,EAAeI,UAAY,CACzBH,GAAII,IAAAA,OAAAA,YAGNH,EAAeE,UAAY,CACzBH,GAAII,IAAAA,OAAAA,YAGNF,EAAkBC,UAAY,CAC5BH,GAAII,IAAAA,OAAAA,a,mLC1FOC,GAAUC,E,QAAAA,IAAO,KAAPA,CAAH,oMAGL,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,UAAUC,KAEvB,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,MAAM,M,SCInB,SAASC,IACtB,IAAMC,GAAUC,EAAAA,EAAAA,MAChB,GAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,gHAE0BjB,EAAAA,EAAAA,IAAeY,GAFzC,gBAEWG,EAFX,EAEWA,KACRC,EAAQD,GAHX,iDAKGG,EAAAA,EAAAA,IAAM,KAAMC,SALf,wDAAD,KAQC,CAACP,IAEAG,GACFK,EAAAA,GAAAA,WAAyB,MAIzB,8BACGL,IACC,SAACX,EAAD,UACGW,EAAKM,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAClCC,EAAUF,EA1BX,kCA2BUA,EACXG,EACJ,OACE,2BACE,gBAAKC,IAAKF,EAASG,IAAKN,EAAMO,MAAM,KAAKC,OAAO,QAChD,uBAAIR,KACJ,uCAAeE,OAHRH,Y","sources":["ServerAPI/ServerApi.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nconst axios = require('axios').default;\n\nconst baseURL = 'https://api.themoviedb.org/3/';\nconst api_key = '9c009c00402fb866baf05bd346a2d01d';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(\n    baseURL +\n      'trending/all/day?' +\n      new URLSearchParams({\n        api_key,\n      })\n  );\n\n  const data = response.data;\n  return data.results;\n};\n\nexport const searchMovie = async query => {\n  const response = await axios.get(\n    baseURL +\n      `search/movie?` +\n      new URLSearchParams({\n        api_key,\n        query,\n        language: 'en-US',\n        page: 1,\n        include_adult: false,\n      })\n  );\n\n  const data = response.data;\n  return data.results;\n};\n\nexport const fetchMovieById = async id => {\n  const response = await axios.get(\n    baseURL +\n      `movie/${id}?` +\n      new URLSearchParams({\n        api_key,\n        language: 'en-US',\n      })\n  );\n\n  const data = response.data;\n  return data;\n};\n\nexport const fetchMovieCast = async id => {\n  const response = await axios.get(\n    baseURL +\n      `movie/${id}/credits?` +\n      new URLSearchParams({\n        api_key,\n        language: 'en-US',\n      })\n  );\n\n  const data = response.data;\n  return data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const response = await axios.get(\n    baseURL +\n      `movie/${id}/reviews?` +\n      new URLSearchParams({\n        api_key,\n        language: 'en-US',\n        page: 1,\n      })\n  );\n\n  const data = response.data;\n  return data;\n};\n\nsearchMovie.propTypes = {\n  query: PropTypes.string.isRequired,\n};\n\nfetchMovieById.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nfetchMovieCast.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nfetchMovieReviews.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const CasList = styled('ul')`\n  list-style: none;\n  padding: 0px 20px 20px;\n  font-size: ${p => p.theme.fontSizes.m}px;\n  & li {\n    padding: ${p => p.theme.space[2]}px;\n  }\n  & li:nth-child(odd) {\n    background: rgb(222, 208, 172);\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useOutletContext } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { animateScroll } from 'react-scroll';\nimport { toast } from 'react-toastify';\nimport { fetchMovieCast } from '../../ServerAPI/ServerApi';\nimport defaultPhoto from '../../images/default.jpeg';\nimport { CasList } from './Cast.styled';\n\nconst IMG_PATH = 'https://image.tmdb.org/t/p/w500';\n\nexport default function Cast() {\n  const movieId = useOutletContext();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const { cast } = await fetchMovieCast(movieId);\n        setCast(cast);\n      } catch (error) {\n        toast(error.message);\n      }\n    })();\n  }, [movieId]);\n\n  if (cast) {\n    animateScroll.scrollMore(250);\n  }\n\n  return (\n    <>\n      {cast && (\n        <CasList>\n          {cast.map(({ cast_id, name, profile_path, character }) => {\n            const imgPath = profile_path\n              ? IMG_PATH + profile_path\n              : defaultPhoto;\n            return (\n              <li key={cast_id}>\n                <img src={imgPath} alt={name} width=\"55\" height=\"75\" />\n                <p>{name}</p>\n                <p>Character: {character}</p>\n              </li>\n            );\n          })}\n        </CasList>\n      )}\n    </>\n  );\n}\n\nCast.propTypes = {\n  movieId: PropTypes.string,\n};\n"],"names":["axios","require","baseURL","api_key","fetchTrending","get","URLSearchParams","response","data","results","searchMovie","query","language","page","include_adult","fetchMovieById","id","fetchMovieCast","fetchMovieReviews","propTypes","PropTypes","CasList","styled","p","theme","fontSizes","m","space","Cast","movieId","useOutletContext","useState","cast","setCast","useEffect","toast","message","animateScroll","map","cast_id","name","profile_path","character","imgPath","defaultPhoto","src","alt","width","height"],"sourceRoot":""}