{"version":3,"file":"static/js/394.4e7f8c83.chunk.js","mappings":"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","sources":["components/ServerAPI/ServerApi.jsx","components/MovieCard/MovieCard.jsx","pages/MovieDetailsPage.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nconst axios = require('axios').default;\n\nconst baseURL = 'https://api.themoviedb.org/3/';\nconst api_key = '9c009c00402fb866baf05bd346a2d01d';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(\n    baseURL +\n      'trending/all/day?' +\n      new URLSearchParams({\n        api_key,\n      })\n  );\n\n  const data = response.data;\n  return data.results;\n};\n\nexport const searchMovie = async query => {\n  const response = await axios.get(\n    baseURL +\n      `search/movie?` +\n      new URLSearchParams({\n        api_key,\n        query,\n        language: 'en-US',\n        page: 1,\n        include_adult: false,\n      })\n  );\n\n  const data = response.data;\n  return data.results;\n};\n\nexport const fetchMovieById = async id => {\n  const response = await axios.get(\n    baseURL +\n      `movie/${id}?` +\n      new URLSearchParams({\n        api_key,\n        language: 'en-US',\n      })\n  );\n\n  const data = response.data;\n  return data;\n};\n\nexport const fetchMovieCredits = async id => {\n  const response = await axios.get(\n    baseURL +\n      `movie/${id}/credits?` +\n      new URLSearchParams({\n        api_key,\n        language: 'en-US',\n      })\n  );\n\n  const data = response.data;\n  return data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const response = await axios.get(\n    baseURL +\n      `movie/${id}/reviews?` +\n      new URLSearchParams({\n        api_key,\n        language: 'en-US',\n        page: 1,\n      })\n  );\n\n  const data = response.data;\n  return data;\n};\n\nsearchMovie.propTypes = {\n  query: PropTypes.string.isRequired,\n};\n\nfetchMovieById.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nfetchMovieCredits.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nfetchMovieReviews.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nconst IMG_PATH = 'https://image.tmdb.org/t/p/w500';\n\nexport default function MovieCard({ movie }) {\n  const { backdrop_path, poster_path, title, overview, genres, vote_average } =\n    movie;\n  const navigate = useNavigate();\n  // const location = useLocation();\n\n  return (\n    <>\n      <GoBackBtn\n        type=\"button\"\n        onClick={() => {\n          navigate(-1);\n          // navigate(location?.state?.from?.pathname ?? '/movies');\n        }}\n      >\n        Go back\n      </GoBackBtn>\n\n      <Container>\n        <ImgWraper>\n          <img src={IMG_PATH + (backdrop_path ?? poster_path)} alt={title} />\n        </ImgWraper>\n        <TextWraper>\n          <MovieTitle>{title}</MovieTitle>\n          <StyledText>\n            <StyledSpan>User score:</StyledSpan> {Math.round(vote_average * 10)}\n            %\n          </StyledText>\n          <StyledText>\n            <StyledSpan>Overview:</StyledSpan> {overview}\n          </StyledText>\n          <StyledSpan>genres:</StyledSpan>\n          <List>\n            {genres.map(({ id, name }) => (\n              <li key={id}>{name}</li>\n            ))}\n          </List>\n        </TextWraper>\n      </Container>\n    </>\n  );\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({}).isRequired,\n};\n\n// styled-components:\nconst Container = styled('div')`\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  @media (min-width: 768px) {\n    padding: 20px;\n  }\n`;\n\nconst ImgWraper = styled('div')`\n  @media (max-width: 768px) {\n    width: 100%;\n\n    & img {\n      display: block;\n      width: 100%;\n      object-fit: cover;\n    }\n  }\n`;\n\nconst TextWraper = styled('div')`\n  width: 100%;\n`;\n\nconst MovieTitle = styled('h2')`\n  margin-bottom: 7px;\n  color: ${p => p.theme.colors.white};\n  font-size: 22px;\n  font-weight: ${p => p.theme.fontWeights.bold};\n  text-align: center;\n`;\n\nconst StyledText = styled('p')`\n  margin-bottom: 7px;\n`;\n\nconst StyledSpan = styled('span')`\n  color: rgb(16, 15, 60);\n  font-weight: ${p => p.theme.fontWeights.bold};\n`;\n\nconst List = styled('ul')`\n  list-style: none;\n  display: flex;\n  margin-bottom: 10px;\n  li {\n    margin-right: 5px;\n    font-size: 14px;\n  }\n`;\n\nconst GoBackBtn = styled('button')`\n  width: 65px;\n  margin: 0 0 0 10px;\n  border: none;\n  outline: none;\n  border-radius: 5px;\n  color: white;\n  background: linear-gradient(to top right, rgb(16, 15, 60), rgb(85, 204, 225));\n  &:hover {\n    color: ${p => p.theme.colors.accent};\n    background: linear-gradient(\n      to top left,\n      rgb(16, 15, 60),\n      rgb(85, 204, 225)\n    );\n  }\n  @media (min-width: 768px) {\n    margin: 0 0 0 20px;\n  }\n`;\n","import { NavLink, Outlet, useParams } from 'react-router-dom';\nimport { useState, useEffect, Suspense } from 'react';\nimport styled from 'styled-components';\nimport MovieCard from 'components/MovieCard/MovieCard';\nimport {\n  fetchMovieById,\n  fetchMovieCredits,\n  fetchMovieReviews,\n} from 'components/ServerAPI/ServerApi';\nimport Loader from 'components/Loader/Loader';\nimport Box from 'components/Box';\n\nexport default function MovieDetailsPage() {\n  const [movie, setMovie] = useState(null);\n  const [cast, setCast] = useState(null);\n  const [reviews, setReviews] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const [movieData, credits, reviews] = await Promise.all([\n          fetchMovieById(movieId),\n          fetchMovieCredits(movieId),\n          fetchMovieReviews(movieId),\n        ]);\n        setMovie(movieData);\n        setCast(credits.cast);\n        setReviews(reviews);\n      } catch (error) {\n        console.log(error.message);\n      }\n    })();\n  }, [movieId]);\n\n  return (\n    <>\n      {movie && <MovieCard movie={movie} />}\n\n      <Title>Additional information</Title>\n      <Box pb={20}>\n        <StyledLink to=\"cast\">Cast</StyledLink>\n        <StyledLink to=\"reviews\">Reviews</StyledLink>\n      </Box>\n\n      <Suspense fallback={<Loader />}>\n        <Outlet context={{ cast, reviews }} />\n      </Suspense>\n    </>\n  );\n}\n\nconst Title = styled('h3')`\n  padding: 5px 10px;\n  margin-top: 0;\n  color: ${p => p.theme.colors.white};\n  font-size: ${p => p.theme.fontSizes.m}px;\n  font-weight: ${p => p.theme.fontWeights.bold};\n  background: linear-gradient(to top left, rgb(16, 15, 60), rgb(85, 204, 225));\n  border-bottom: 1px solid ${p => p.theme.colors.accent};\n`;\n\nconst StyledLink = styled(NavLink)`\n  display: block;\n  margin: 5px 20px;\n  color: ${p => p.color || p.theme.colors.white};\n\n  &.active {\n    color: ${p => p.theme.colors.accent};\n  }\n`;\n"],"names":["axios","require","baseURL","api_key","fetchTrending","get","URLSearchParams","response","data","results","searchMovie","query","language","page","include_adult","fetchMovieById","id","fetchMovieCredits","fetchMovieReviews","propTypes","PropTypes","MovieCard","movie","backdrop_path","poster_path","title","overview","genres","vote_average","navigate","useNavigate","GoBackBtn","type","onClick","Container","ImgWraper","src","alt","TextWraper","MovieTitle","StyledText","StyledSpan","Math","round","List","map","name","styled","p","theme","colors","white","fontWeights","bold","accent","MovieDetailsPage","useState","setMovie","cast","setCast","reviews","setReviews","movieId","useParams","useEffect","Promise","all","movieData","credits","console","log","message","Title","Box","pb","StyledLink","to","Suspense","fallback","Loader","context","fontSizes","m","NavLink","color"],"sourceRoot":""}