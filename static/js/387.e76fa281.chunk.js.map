{"version":3,"file":"static/js/387.e76fa281.chunk.js","mappings":"4TACMA,EAAQC,EAAAA,MAAAA,QAERC,EAAU,gCACVC,EAAU,mCAEHC,EAAa,mCAAG,2GAAOC,EAAP,+BAAc,EAAd,SACJL,EAAMM,IAC3BJ,EACE,oBACA,IAAIK,gBAAgB,CAClBJ,QAAAA,EACAE,KAAMA,KANe,cACrBG,EADqB,OAUrBC,EAAOD,EAASC,KAVK,kBAWpB,CACLC,QAASD,EAAKC,QACdL,KAAMI,EAAKJ,KACXM,WAAYF,EAAKG,cAdQ,2CAAH,qDAkBbC,EAAW,mCAAG,WAAOC,GAAP,8FAAcT,EAAd,+BAAqB,EAArB,SACFL,EAAMM,IAC3BJ,EAAO,gBAEL,IAAIK,gBAAgB,CAClBJ,QAAAA,EACAW,MAAAA,EACAC,SAAU,QACVV,KAAMA,EACNW,eAAe,KATI,cACnBR,EADmB,OAanBC,EAAOD,EAASC,KAbG,kBAclB,CACLC,QAASD,EAAKC,QACdL,KAAMI,EAAKJ,KACXM,WAAYF,EAAKG,cAjBM,2CAAH,sDAqBXK,EAAc,mCAAG,WAAMC,GAAN,yFACLlB,EAAMM,IAC3BJ,EAAO,gBACIgB,EADJ,KAEL,IAAIX,gBAAgB,CAClBJ,QAAAA,EACAY,SAAU,WANY,cACtBP,EADsB,OAUtBC,EAAOD,EAASC,KAVM,kBAWrBA,GAXqB,2CAAH,sDAcdU,EAAc,mCAAG,WAAMD,GAAN,yFACLlB,EAAMM,IAC3BJ,EAAO,gBACIgB,EADJ,aAEL,IAAIX,gBAAgB,CAClBJ,QAAAA,EACAY,SAAU,WANY,cACtBP,EADsB,OAUtBC,EAAOD,EAASC,KAVM,kBAWrBA,GAXqB,2CAAH,sDAcdW,EAAiB,mCAAG,WAAMF,GAAN,yFACRlB,EAAMM,IAC3BJ,EAAO,gBACIgB,EADJ,aAEL,IAAIX,gBAAgB,CAClBJ,QAAAA,EACAY,SAAU,QACVV,KAAM,KAPmB,cACzBG,EADyB,OAWzBC,EAAOD,EAASC,KAXS,kBAYxBA,GAZwB,2CAAH,sDAe9BI,EAAYQ,UAAY,CACtBP,MAAOQ,IAAAA,OAAAA,YAGTL,EAAeI,UAAY,CACzBH,GAAII,IAAAA,OAAAA,YAGNH,EAAeE,UAAY,CACzBH,GAAII,IAAAA,OAAAA,YAGNF,EAAkBC,UAAY,CAC5BH,GAAII,IAAAA,OAAAA,a,qLCnGAC,GAAcC,EAAAA,EAAAA,IAAO,KAAPA,CAAH,oMAGF,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,UAAUC,KAEvB,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,MAAM,MAM5BC,GAAcN,EAAAA,EAAAA,IAAO,IAAPA,CAAH,2GAIN,SAAAC,GAAC,OAAIA,EAAEC,MAAMK,OAAOC,U,SCThB,SAASC,IACtB,IAAMC,GAAUC,EAAAA,EAAAA,MAChB,GAA6BC,EAAAA,EAAAA,UAAS,MAAtC,eAAOC,EAAP,KAAgBC,EAAhB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,8GAE4BnB,EAAAA,EAAAA,IAAkBc,GAF9C,OAESM,EAFT,OAGGF,EAAUE,GAHb,gDAKGC,EAAAA,GAAAA,MAAY,KAAMC,SALrB,wDAAD,KAQC,CAACR,IAEAG,GACFM,EAAAA,GAAAA,WAAyB,MAIzB,8BACGN,IACEA,EAAQ3B,QAAQkC,OAAS,GACxB,SAACrB,EAAD,UACGc,EAAQ3B,QAAQmC,KAAI,gBAAG3B,EAAH,EAAGA,GAAI4B,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACnB,2BACE,qCAAaD,MACb,6BAAKC,OAFE7B,SAOb,SAACY,EAAD","sources":["ServerAPI/ServerApi.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nconst axios = require('axios').default;\n\nconst baseURL = 'https://api.themoviedb.org/3/';\nconst api_key = '9c009c00402fb866baf05bd346a2d01d';\n\nexport const fetchTrending = async (page = 1) => {\n  const response = await axios.get(\n    baseURL +\n      'trending/all/day?' +\n      new URLSearchParams({\n        api_key,\n        page: page,\n      })\n  );\n\n  const data = response.data;\n  return {\n    results: data.results,\n    page: data.page,\n    totalPages: data.total_pages,\n  };\n};\n\nexport const searchMovie = async (query, page = 1) => {\n  const response = await axios.get(\n    baseURL +\n      `search/movie?` +\n      new URLSearchParams({\n        api_key,\n        query,\n        language: 'en-US',\n        page: page,\n        include_adult: false,\n      })\n  );\n\n  const data = response.data;\n  return {\n    results: data.results,\n    page: data.page,\n    totalPages: data.total_pages,\n  };\n};\n\nexport const fetchMovieById = async id => {\n  const response = await axios.get(\n    baseURL +\n      `movie/${id}?` +\n      new URLSearchParams({\n        api_key,\n        language: 'en-US',\n      })\n  );\n\n  const data = response.data;\n  return data;\n};\n\nexport const fetchMovieCast = async id => {\n  const response = await axios.get(\n    baseURL +\n      `movie/${id}/credits?` +\n      new URLSearchParams({\n        api_key,\n        language: 'en-US',\n      })\n  );\n\n  const data = response.data;\n  return data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const response = await axios.get(\n    baseURL +\n      `movie/${id}/reviews?` +\n      new URLSearchParams({\n        api_key,\n        language: 'en-US',\n        page: 1,\n      })\n  );\n\n  const data = response.data;\n  return data;\n};\n\nsearchMovie.propTypes = {\n  query: PropTypes.string.isRequired,\n};\n\nfetchMovieById.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nfetchMovieCast.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nfetchMovieReviews.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nconst ReviewdList = styled('ul')`\n  list-style: none;\n  padding: 0px 20px 20px;\n  font-size: ${p => p.theme.fontSizes.m}px;\n  & li {\n    padding: ${p => p.theme.space[2]}px;\n  }\n  & li:nth-child(odd) {\n    background: rgb(222, 208, 172);\n  }\n`;\nconst ReviewdText = styled('p')`\n  font-size: 34px;\n  text-align: center;\n  padding-bottom: 20px;\n  color: ${p => p.theme.colors.accent};\n`;\n\nexport { ReviewdList, ReviewdText };\n","import { useState, useEffect } from 'react';\nimport { useOutletContext } from 'react-router-dom';\nimport { animateScroll } from 'react-scroll';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport { fetchMovieReviews } from '../../ServerAPI/ServerApi';\nimport { ReviewdList, ReviewdText } from './Reviews.styled';\n\nexport default function Reviews() {\n  const movieId = useOutletContext();\n  const [reviews, setReview] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const reviewData = await fetchMovieReviews(movieId);\n        setReview(reviewData);\n      } catch (error) {\n        toast.error(error.message);\n      }\n    })();\n  }, [movieId]);\n\n  if (reviews) {\n    animateScroll.scrollMore(250);\n  }\n\n  return (\n    <>\n      {reviews &&\n        (reviews.results.length > 0 ? (\n          <ReviewdList>\n            {reviews.results.map(({ id, author, content }) => (\n              <li key={id}>\n                <h2>Author: {author}</h2>\n                <p> {content}</p>\n              </li>\n            ))}\n          </ReviewdList>\n        ) : (\n          <ReviewdText>No rewiews</ReviewdText>\n        ))}\n    </>\n  );\n}\n\nReviews.propTypes = {\n  reviews: PropTypes.shape({\n    movieId: PropTypes.string,\n  }),\n};\n"],"names":["axios","require","baseURL","api_key","fetchTrending","page","get","URLSearchParams","response","data","results","totalPages","total_pages","searchMovie","query","language","include_adult","fetchMovieById","id","fetchMovieCast","fetchMovieReviews","propTypes","PropTypes","ReviewdList","styled","p","theme","fontSizes","m","space","ReviewdText","colors","accent","Reviews","movieId","useOutletContext","useState","reviews","setReview","useEffect","reviewData","toast","message","animateScroll","length","map","author","content"],"sourceRoot":""}